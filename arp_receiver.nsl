#include "arp_receiver.inc"
module arp_receiver {
  reg running = 0, pvalid = 0;
  reg cnt[8];
  reg smac[48] = 0, sip[32] = 0;
  reg dmac[48] = 0, dip[32] = 0;

  proc_name hwtype, protocoltype, hwsize, protocolsize;
  proc_name opecode, srcmac, srcip, dstmac, dstip;
  proc_name padding, fcs;

  proc_name recv, error_detect;

  pvalid := valid;
  if(error == 1) error_detect();
  
  if(running == 1 && pvalid == 1 && valid == 0){
    running := 0;
  }

  func start {
    _display("arp_start %x", data);
    if(running == 1) error_detect();
    else {cnt := 0; running := 1; hwtype();}
  }

  proc hwtype {
    _display("hwtype %x", data);
    cnt := if(cnt + 1 == 4) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x0) : error_detect();
      (cnt == 1 && data != 0x0) : error_detect();
      (cnt == 2 && data != 0x1) : error_detect();
      (cnt == 3 && data != 0x0) : error_detect();
      (cnt + 1 == 4) : protocoltype();
    }
  }

  proc protocoltype {
    _display("protocoltype %x", data);
    cnt := if(cnt + 1 == 4) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x8) : error_detect();
      (cnt == 1 && data != 0x0) : error_detect();
      (cnt == 2 && data != 0x0) : error_detect();
      (cnt == 3 && data != 0x0) : error_detect();
      (cnt + 1 == 4) : hwsize();
    }
  }

  proc hwsize {
    _display("hwsize %x", data);
    cnt := if(cnt + 1 == 2) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x6) : error_detect();
      (cnt == 1 && data != 0x0) : error_detect();
      (cnt + 1 == 2) : protocolsize();
    }
  }

  proc protocolsize {
    _display("protocolsize %x", data);
    cnt := if(cnt + 1 == 2) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x4) : error_detect();
      (cnt == 1 && data != 0x0) : error_detect();
      (cnt + 1 == 2) : opecode();
    }
  }

  proc opecode {
    _display("opecode %x", data);
    cnt := if(cnt + 1 == 4) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x0) : error_detect();
      (cnt == 1 && data != 0x0) : error_detect();
      (cnt == 2 && data != 0x1) : error_detect();
      (cnt == 3 && data != 0x0) : error_detect();
      (cnt + 1 == 4) : srcmac();
    }
  }

  proc srcmac {
    _display("srcmac: %x %x", smac, data);
    cnt := if(cnt + 1 == 12) 0 else cnt + 1;
    if(cnt[0] == 0) smac := ((smac<<8)[47:0])|48'data;
    if(cnt[0] == 1) smac := smac|48'{data,0x0};
    if(cnt + 1 == 12) srcip();
  }

  proc srcip {
    _display("srcip: %x %x", sip, data);
    cnt := if(cnt + 1 == 8) 0 else cnt + 1;
    if(cnt[0] == 0) sip := ((sip<<8)[31:0])|32'data;
    if(cnt[0] == 1) sip := sip|32'{data,0x0};
    if(cnt + 1 == 8) dstmac();
  }

  proc dstmac {
    _display("dstmac");
    cnt := if(cnt + 1 == 12) 0 else cnt + 1;
    if(cnt[0] == 0) dmac := ((dmac<<8)[47:0])|48'data;
    if(cnt[0] == 1) dmac := dmac|48'{data,0x0};
    if(data != 0x0) error_detect();
    if(cnt + 1 == 12) dstip();
  }

  proc dstip {
    _display("dstip");
    cnt := if(cnt + 1 == 8) 0 else cnt + 1;
    if(cnt[0] == 0) dip := ((dip<<8)[31:0])|32'data;
    if(cnt[0] == 1) dip := dip|32'{data,0x0};
    if(cnt + 1 == 8) padding();
  }

  proc padding {
    _display("padding");
    cnt := if(cnt + 1 == 36) 0 else cnt + 1;
    if(data != 0x0) error_detect();
    if(cnt + 1 == 36) fcs();
  }

  proc fcs {
    _display("fcs");
    cnt := if(cnt + 1 == 8) 0 else cnt + 1;
    if(cnt + 1 == 8) recv();
  }

  proc recv {
    _display("Success");
    _display("%x",smac);
    _display("%x",sip);
    _display("%x",dmac);
    _display("%x",dip);
    received();
    finish;
  }

  proc error_detect {
    error_detected();
    finish;
  }

  func getSMAC {
    return smac;
  }

  func getSIP {
    return sip;
  }

  func getDMAC {
    return dmac;
  }

  func getDIP {
    return dip;
  }
}
