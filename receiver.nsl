#include "receiver.inc"
module receiver {
  reg running = 0, pvalid;

  reg count[32] = 0;
  reg cnt[8];
  reg psmac[48] = 0;
  reg smac[48] = 0, sip[32] = 0;
  reg dmac[48] = 0, dip[32] = 0;

  proc_name sfd, dst, src, arp;
  proc_name hwtype, protocoltype, hwsize, protocolsize;
  proc_name opecode, srcmac, srcip, dstmac, dstip;

  proc_name recv, error_detect;

  pvalid := valid;
  count := count + 1;
  if(error == 1) error_detect();

  if(valid == 1 && running == 0){
    sfd();
    cnt := 0;
    running := 1;
  }

  if(running == 1 && pvalid == 1 && valid == 0){
    running := 0;
  }

  proc sfd {
    any {
      (data == 0x5) : dst();
      (data != 0x5 && data != 0xd) : error_detect();
    }
  }

  proc dst {
    _display("dst");
    cnt := if(cnt + 1 == 12) 0 else cnt + 1;
    any {
      (data != 0xf) : error_detect();
      (cnt + 1 == 12) : src();
    }
  }

  proc src {
    _display("src");
    cnt := if(cnt + 1 == 12) 0 else cnt + 1;
    if(cnt[0] == 0) psmac := ((psmac<<8)[47:0])|48'(data<<4);
    if(cnt[0] == 1) psmac := psmac|48'data;
    if(cnt + 1 == 12) arp();
  }

  proc arp {
    _display("arp");
    cnt := if(cnt + 1 == 4) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x8) : error_detect();
      (cnt == 1 && data != 0x0) : error_detect();
      (cnt == 2 && data != 0x6) : error_detect();
      (cnt == 3 && data != 0x0) : error_detect();
      (cnt + 1 == 4) : hwtype();
    }
  }

  proc hwtype {
    _display("hwtype");
    cnt := if(cnt + 1 == 4) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x0) : error_detect();
      (cnt == 1 && data != 0x0) : error_detect();
      (cnt == 2 && data != 0x1) : error_detect();
      (cnt == 3 && data != 0x0) : error_detect();
      (cnt + 1 == 4) : protocoltype();
    }
  }

  proc protocoltype {
    _display("protocoltype");
    cnt := if(cnt + 1 == 4) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x0) : error_detect();
      (cnt == 1 && data != 0x8) : error_detect();
      (cnt == 2 && data != 0x0) : error_detect();
      (cnt == 3 && data != 0x0) : error_detect();
      (cnt + 1 == 4) : hwsize();
    }
  }

  proc hwsize {
    _display("hwsize");
    cnt := if(cnt + 1 == 2) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x6) : error_detect();
      (cnt == 1 && data != 0x0) : error_detect();
      (cnt + 1 == 2) : protocolsize();
    }
  }

  proc protocolsize {
    _display("protocolsize");
    cnt := if(cnt + 1 == 2) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x4) : error_detect();
      (cnt == 1 && data != 0x0) : error_detect();
      (cnt + 1 == 2) : opecode();
    }
  }

  proc opecode {
    _display("opecode");
    cnt := if(cnt + 1 == 4) 0 else cnt + 1;
    any {
      (cnt == 0 && data != 0x0) : error_detect();
      (cnt == 1 && data != 0x0) : error_detect();
      (cnt == 2 && data != 0x1) : error_detect();
      (cnt == 3 && data != 0x0) : error_detect();
      (cnt + 1 == 4) : srcmac();
    }
  }

  proc srcmac {
    _display("srcmac");
    cnt := if(cnt + 1 == 12) 0 else cnt + 1;
    if(cnt[0] == 0) smac := ((smac<<8)[47:0])|48'(data<<4);
    if(cnt[0] == 1) smac := smac|48'data;
    if(cnt + 1 == 12) srcip();
  }

  proc srcip {
    _display("srcip");
    cnt := if(cnt + 1 == 8) 0 else cnt + 1;
    if(cnt[0] == 0) sip := ((sip<<8)[31:0])|32'(data<<4);
    if(cnt[0] == 1) sip := sip|32'data;
    if(cnt + 1 == 8) dstmac();
  }

  proc dstmac {
    _display("dstmac");
    cnt := if(cnt + 1 == 12) 0 else cnt + 1;
    if(cnt[0] == 0) dmac := ((dmac<<8)[47:0])|48'(data<<4);
    if(cnt[0] == 1) dmac := dmac|48'data;
    if(data != 0x0) error_detect();
    if(cnt + 1 == 12) dstip();
  }

  proc dstip {
    _display("dstip");
    cnt := if(cnt + 1 == 8) 0 else cnt + 1;
    if(cnt[0] == 0) dip := ((dip<<8)[31:0])|32'(data<<4);
    if(cnt[0] == 1) dip := dip|32'data;
    if(cnt + 1 == 8) recv();
  }

  proc recv {
    _display("Success");
    _display("%x",psmac);
    _display("%x",smac);
    _display("%x",sip);
    _display("%x",dmac);
    _display("%x",dip);
    received();
    finish;
  }

  proc error_detect {
    _display("Error");
    finish;
  }

  func getMAC {
    return smac;
  }

  func getIP {
    return sip;
  }
}
