#include "receiver.inc"

declare receiver_test simulation {}

module receiver_test
{
    reg rx_clock = 0;
    mem ps[256][4] = {
        0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0xd,
        0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xc,0x3,0x7,0x9,
        0xe,0x0,0xc,0x0,0x9,0xa,0x1,0x3,0x8,0x0,0x6,0x0,0x0,0x0,0x1,0x0,
        0x8,0x0,0x0,0x0,0x6,0x0,0x4,0x0,0x0,0x0,0x1,0x0,0xc,0x3,0x7,0x9,
        0xe,0x0,0xc,0x0,0x9,0xa,0x1,0x3,0x0,0xc,0x8,0xa,0x1,0x0,0x2,0x0,
        0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x8,0xa,
        0x1,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
        0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
        0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xe,0xb,0x0,0x1,0xb,0x7,0x9
    };
    reg counter[9] = 0;

    receiver rx;
    rx.p_reset = p_reset;
    rx.m_clock = m_clock;

    counter++;
    if(counter <= 0x10)
    {
        rx.valid = 0;
        rx.data = 0x00;
    }

    if(counter > 0x10 && counter < (0d72 + 0x10))
    {
        rx.data = {ps[counter - 0x10]};
        rx.valid = 1;
        _display("0x%x", ps[counter - 0x10]);
    }

    if(counter >= (0d72 + 0x10))
    {
        rx.valid = 0;
        rx.data = 0x00;
    }

    func rx.received {
        _display("received: %x %x", rx.getIP(), rx.getMAC());
    }

    if(counter > 500)
    {
        _finish();
    }
}
