#include "snx_eth.inc"

declare receiver_test simulation {}

module receiver_test
{
    reg rx_clock = 0;
    mem ps[256][4] = {
        0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0x5,0xd,
        0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xf,0xc,0x3,0x7,0x9,
        0xe,0x0,0xc,0x0,0x9,0xa,0x1,0x3,0x8,0x0,0x6,0x0,0x0,0x0,0x1,0x0,
        0x8,0x0,0x0,0x0,0x6,0x0,0x4,0x0,0x0,0x0,0x1,0x0,0xc,0x3,0x7,0x9,
        0xe,0x0,0xc,0x0,0x9,0xa,0x1,0x3,0x0,0xc,0x8,0xa,0x1,0x0,0x2,0x0,
        0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x8,0xa,
        0x1,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
        0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
        0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xe,0xb,0x0,0x1,0xb,0x7,0x9
    };

    reg counter[9] = 0;

    snx_eth eth;
    
    eth.p_reset = p_reset;
    eth.m_clock = m_clock;
    eth.error = 0;

    counter++;

 
    if(counter <= 9'0x10)
    {
        eth.valid = 0;
        eth.data = 4'0x0;
    }

    if(counter > 9'0x10 && counter < (9'0d144+ 9'0x10))
    {
        _display("count:%d , value:%x", counter, ps[counter - 9'0x10]);
        eth.data = ps[counter - 9'0x10];
        eth.valid = 1;
        //_display("0x%x", ps[counter - 9'0x10]);
    }

    if(counter >= (9'0d144 + 9'0x10))
    {
        //_display("COUNT:%d , VALUE:%x", counter, ps[counter - 9'0x10]);
        eth.valid = 0;
        eth.data = 4'0x0;
    }

    if(counter > 9'0d300)
    {
        _finish();
    }
}
