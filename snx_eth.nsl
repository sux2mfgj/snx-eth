#include "snx_eth.inc"
#include "arp_receiver.inc"

module snx_eth
{
    arp_receiver arp_rx;
    reg led[8] = 0;

    proc_name sfd, dst, src, check;
    reg running = 0;
    reg cnt[8];
    reg smac[48] = 0, dmac[48] = 0;

    reg  eth_buf[16];
    wire eth_cur[16];

    //_display("%x", data);

    if(valid == 1 && running == 0){
        sfd();
        cnt := 0;
	eth_buf := 0;
        running := 1;
	smac := 0;
	dmac := 0;
    }

    proc sfd {
    	_display("sfd");
        if (data == 0xd) dst();
    }

    proc dst {
    	_display("dst");
     	cnt := if(cnt + 1 == 12) 0 else cnt + 1;
    	if(cnt[0] == 0) dmac := {dmac[39:0], 0x0, data};
    	if(cnt[0] == 1) dmac := dmac|48'{data,0x0};
    	if(cnt + 1 == 12) src();
    }

    proc src {
        _display("src");
    	cnt := if(cnt + 1 == 12) 0 else cnt + 1;
    	if(cnt[0] == 0) smac := {smac[39:0], 0x0, data};
    	if(cnt[0] == 1) smac := smac|48'{data,0x0};
    	if(cnt + 1 == 12) check();
    }

    proc check {
    	cnt := if(cnt + 1 == 4) 0 else cnt + 1;
	eth_cur = {eth_buf[11:0], data};
	eth_buf := eth_cur;
    	_display("check: %x", eth_cur);
    	any {
      	    (cnt + 1 == 4 && eth_cur == 0x8060) : {arp_rx.start();finish;}
      	    //(cnt + 1 == 4 && eth_cur == 0x8000) : {ip.start();finish;}
 	}
    }

    arp_rx.p_reset = p_reset;
    arp_rx.m_clock = m_clock;
    arp_rx.data = data;
    arp_rx.valid = valid;
    arp_rx.error = error;

    func arp_rx.received {
    	_display("S: %x %x", arp_rx.getSMAC(), arp_rx.getSIP());
    	_display("D: %x %x", arp_rx.getDMAC(), arp_rx.getDIP());
        led := 8'0xaa;
        received();
	    running := 0;
    }

    func getSIP {
        return arp_rx.getSIP();
    }

    func getDIP {
        return arp_rx.getDIP();
    }


    func getled {
        return led;
    }
}
